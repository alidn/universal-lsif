[typescript]
start_command = "typescript-language-server"
start_args = ["--stdio"]
installation_command = "npm install -g typescript-language-server"
extensions = ["ts", "tsx"]
keywords = ["break", "as", "any", "case", "implements", "boolean",
            "catch", "interface", "constructor", "class", "let",
            "declare", "const", "package", "get", "continue", "private",
            "module", "debugger", "protected", "require", "default",
            "public", "number", "delete", "static", "set", "do", "yield",
            "string", "else", "symbol", "enum", "type", "export", "from",
            "extends", "of", "false"]

[javascript]
start_command = "typescript-language-server"
start_args = ["--stdio"]
installation_command = "npm install -g typescript-language-server"
extensions = ["js", "jsx"]
keywords = ["break", "as", "any", "case", "implements", "boolean",
            "catch", "interface", "constructor", "class", "let",
            "declare", "const", "package", "get", "continue", "private",
            "module", "debugger", "protected", "require", "default",
            "public", "number", "delete", "static", "set", "do", "yield",
            "string", "else", "symbol", "enum", "type", "export", "from",
            "extends", "of", "false"]

[rust]
start_command = "rust-analyzer"
start_args = []
extensions = ["rs"]
keywords = ["as", "async", "use", "await", "break", "const",
            "continue", "crate", "dyn", "else", "if", "let", 
            "enum", "extern", "false", "fn", "for", "match",
            "impl", "in", "loop", "mod", "move", "mut", "pub",
            "ref", "return", "Self", "self", "static", "struct",
            "super", "trait", "true", "type", "union", "unsafe",
            "use", "where", "while"]

[go]
start_command = "gopls"
start_args = []
installation_command = "`go get golang.org/x/tools/gopls@vX.Y.Z`"
extensions = ["go"]
keywords = ["go", "func", "type", "struct", "interface", "default", 
            "select", "case", "defer", "map", "chan", "else", "goto", 
            "package", "switch", "const", "fallthrough", "if", "range", 
            "continue", "for", "import", "return", "var"]

[ruby]
start_command = "solargraph"
start_args = ["stdio"]
installation_command = "gem install solargraph"
extensions = ["rb"]
keywords = ["BEGIN", "END", "alias", "and", "begin", "break", "case",
            "class", "def", "module", "next", "nil", "not", "or", "redo",
            "rescue", "retry", "return", "elsif", "and", "false", "ensure",
            "for", "if", "true", "undef", "unless", "do", "else", "super",
            "then", "until", "when", "while", "defined?", "self", "yield"]

[ocaml]
start_command = "opam"
start_args = ["init"]
installation_command = "opam install ocaml-lsp-server"
extensions = ["ml"]
keywords = []